{"version":3,"sources":["FileInfoCard.tsx","App.tsx","UploadCard.tsx","../node_modules/node-libpng/dist sync","reportWebVitals.ts","Theme.ts","index.tsx"],"names":["FileTypeIconMap","SmileBASICFileType","Text","DescriptionIcon","Data","AssessmentIcon","Project3","FolderOpenIcon","Project4","Meta","PermMediaIcon","Jpeg","ImageIcon","FileTypeDescriptionMap","useStyles","makeStyles","theme","listIcon","marginRight","spacing","converter","file","a","ConvertFile","nice","buffer","blob","Blob","type","ReturnedMimeType","FileSaver","saveAs","ConvertButton","onClick","convertAndDownload","ShortName","CardInfoSide","useState","Converted","setConverted","styles","useEffect","ToActualType","then","Type","CodeFileConverter","code","sandbox","seamless","srcDoc","toString","style","height","width","title","IconFileConverter","icon","src","URL","createObjectURL","alt","className","variant","Content","ProjectName","PngFileConverter","CanConvertFile","canBePng","image","maxHeight","maxWidth","JpegFileConverter","jpeg","FileInfoCard","name","FileIcon","fileConverters","setFileConverters","GetSupportedFileConverters","converters","catch","e","alert","stack","substr","component","Header","Editor","UID","Username","RawContent","length","toLocaleString","LastModified","map","SubFiles","console","log","Files","files","keys","push","get","my","ml","App","currentFile","setCurrentFile","setLoading","handleUpload","event","currentTarget","Buffer","arrayBuffer","from","SmileBASICFile","FromBuffer","position","edge","color","aria-label","id","onUpload","FileUploadButton","props","display","htmlFor","UploadCard","onChange","webpackEmptyContext","req","Error","resolve","module","exports","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Theme","createMuiTheme","palette","primary","main","secondary","ReactDOM","render","StrictMode","ThemeProvider","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.a549872c.chunk.js","sourcesContent":["import {\r\n  Box,\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  createStyles,\r\n  List,\r\n  ListItem,\r\n  makeStyles,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  SmileBASICFile,\r\n  SmileBASICFileType,\r\n  SmileBASICMetaFile,\r\n} from \"@sbapi-team/smilebasic-fileparser\";\r\nimport DescriptionIcon from \"@material-ui/icons/Description\";\r\nimport AssessmentIcon from \"@material-ui/icons/Assessment\";\r\nimport FolderOpenIcon from \"@material-ui/icons/FolderOpen\";\r\nimport PermMediaIcon from \"@material-ui/icons/PermMedia\";\r\nimport ImageIcon from \"@material-ui/icons/Image\";\r\nimport PersonIcon from \"@material-ui/icons/Person\";\r\nimport SaveIcon from \"@material-ui/icons/Save\";\r\nimport CalendarTodayIcon from \"@material-ui/icons/CalendarToday\";\r\nimport FileCopyIcon from \"@material-ui/icons/FileCopy\";\r\nimport React from \"react\";\r\nimport {\r\n  CodeFileConverter,\r\n  FileConverter,\r\n  GetSupportedFileConverters,\r\n  IconFileConverter,\r\n  JpegFileConverter,\r\n  PngFileConverter,\r\n} from \"@sbapi-team/sbapi-file-conversions\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport FileSaver from \"file-saver\";\r\nimport { FreeBreakfastOutlined } from \"@material-ui/icons\";\r\n\r\nconst FileTypeIconMap = {\r\n  [SmileBASICFileType.Text]: DescriptionIcon,\r\n  [SmileBASICFileType.Data]: AssessmentIcon,\r\n  [SmileBASICFileType.Project3]: FolderOpenIcon,\r\n  [SmileBASICFileType.Project4]: FolderOpenIcon,\r\n  [SmileBASICFileType.Meta]: PermMediaIcon,\r\n  [SmileBASICFileType.Jpeg]: ImageIcon,\r\n};\r\n\r\nconst FileTypeDescriptionMap = {\r\n  [SmileBASICFileType.Text]: \"Text file\",\r\n  [SmileBASICFileType.Data]: \"Data file\",\r\n  [SmileBASICFileType.Project3]: \"Project (SmileBASIC 3)\",\r\n  [SmileBASICFileType.Project4]: \"Project (SmileBASIC 4)\",\r\n  [SmileBASICFileType.Meta]: \"Project Metadata\",\r\n  [SmileBASICFileType.Jpeg]: \"JPEG image\",\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  listIcon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nasync function convertAndDownload(\r\n  converter: FileConverter,\r\n  file: SmileBASICFile\r\n) {\r\n  const buffer = await converter.ConvertFile(file, { nice: true });\r\n  const blob = new Blob([buffer], { type: converter.ReturnedMimeType });\r\n\r\n  FileSaver.saveAs(blob, \"download\");\r\n}\r\n\r\nconst ConvertButton = ({\r\n  converter,\r\n  file,\r\n}: {\r\n  converter: FileConverter;\r\n  file: SmileBASICFile;\r\n}) => {\r\n  return (\r\n    <Button onClick={() => convertAndDownload(converter, file)}>\r\n      {converter.ShortName}\r\n    </Button>\r\n  );\r\n};\r\n\r\nconst CardInfoSide = ({ file }: { file: SmileBASICFile }) => {\r\n  const [Converted, setConverted] = useState<React.FC>();\r\n  const styles = useStyles();\r\n\r\n  useEffect(() => {\r\n    file.ToActualType().then((file) => {\r\n      switch (file.Type) {\r\n        case SmileBASICFileType.Text:\r\n          CodeFileConverter.ConvertFile(file).then((code) =>\r\n            setConverted(() => () => (\r\n              <iframe\r\n                sandbox=\"allow-scripts\"\r\n                seamless\r\n                srcDoc={code.toString(\"utf8\")}\r\n                style={{ height: \"20em\", width: \"100%\" }}\r\n                title=\"Code\"\r\n              />\r\n            ))\r\n          );\r\n          break;\r\n        case SmileBASICFileType.Meta:\r\n          IconFileConverter.ConvertFile(file).then((icon) =>\r\n            setConverted(() => () => (\r\n              <Box>\r\n                <List>\r\n                  <ListItem>\r\n                    <img\r\n                      src={URL.createObjectURL(\r\n                        new Blob([icon], {\r\n                          type: IconFileConverter.ReturnedMimeType,\r\n                        })\r\n                      )}\r\n                      alt=\"icon\"\r\n                      className={styles.listIcon}\r\n                    />\r\n                    <Typography variant=\"h5\">\r\n                      {(file as SmileBASICMetaFile).Content.ProjectName}\r\n                    </Typography>\r\n                  </ListItem>\r\n                </List>\r\n              </Box>\r\n            ))\r\n          );\r\n          break;\r\n        case SmileBASICFileType.Data:\r\n          PngFileConverter.CanConvertFile(file).then((canBePng) => {\r\n            if (canBePng) {\r\n              PngFileConverter.ConvertFile(file).then((image) =>\r\n                setConverted(() => () => (\r\n                  <img\r\n                    src={URL.createObjectURL(\r\n                      new Blob([image], {\r\n                        type: PngFileConverter.ReturnedMimeType,\r\n                      })\r\n                    )}\r\n                    style={{\r\n                      maxHeight: \"300px\",\r\n                      maxWidth: \"300px\",\r\n                    }}\r\n                    alt=\"img preview\"\r\n                  />\r\n                ))\r\n              );\r\n            } else {\r\n              setConverted(() => () => (\r\n                <Typography>Can't be previewed.</Typography>\r\n              ));\r\n            }\r\n          });\r\n          break;\r\n        case SmileBASICFileType.Jpeg:\r\n          JpegFileConverter.ConvertFile(file).then((jpeg) =>\r\n            setConverted(() => () => (\r\n              <img\r\n                src={URL.createObjectURL(\r\n                  new Blob([jpeg], {\r\n                    type: PngFileConverter.ReturnedMimeType,\r\n                  })\r\n                )}\r\n                style={{\r\n                  maxHeight: \"300px\",\r\n                  maxWidth: \"300px\",\r\n                }}\r\n                alt=\"img preview\"\r\n              />\r\n            ))\r\n          );\r\n          break;\r\n        default:\r\n          setConverted(() => () => null);\r\n      }\r\n    });\r\n  }, [file]);\r\n\r\n  return Converted ? <Converted /> : <Typography>Loading...</Typography>;\r\n};\r\n\r\nconst FileInfoCard = ({\r\n  file,\r\n  name,\r\n}: {\r\n  file: SmileBASICFile;\r\n  name?: string;\r\n}) => {\r\n  const styles = useStyles();\r\n  const FileIcon = FileTypeIconMap?.[file.Type!];\r\n  const [fileConverters, setFileConverters] = useState<FileConverter[]>();\r\n\r\n  useEffect(() => {\r\n    GetSupportedFileConverters(file)\r\n      .then((converters) => {\r\n        setFileConverters(converters);\r\n      })\r\n      .catch((e) => {\r\n        alert(e.stack);\r\n      });\r\n  }, [file]);\r\n\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\">\r\n          {name && `(${name === \"META\" ? name : name.substr(1)}) `} File\r\n          information:\r\n        </Typography>\r\n        <br />\r\n        <Box>\r\n          <List component=\"nav\">\r\n            <ListItem>\r\n              <FileIcon className={styles.listIcon} />\r\n              <Typography>{FileTypeDescriptionMap[file.Type!]}</Typography>\r\n            </ListItem>\r\n            <ListItem>\r\n              <PersonIcon className={styles.listIcon} />\r\n              <Typography title={`User ID ${file.Header.Editor.UID}`}>\r\n                {file.Header.Editor.Username}\r\n              </Typography>\r\n            </ListItem>\r\n            <ListItem>\r\n              <SaveIcon className={styles.listIcon} />\r\n              <Typography>\r\n                {`${file.RawContent.length.toLocaleString()} bytes`}\r\n              </Typography>\r\n            </ListItem>\r\n            <ListItem>\r\n              <CalendarTodayIcon className={styles.listIcon} />\r\n              <Typography>{`${file.Header.LastModified.toLocaleString()}`}</Typography>\r\n            </ListItem>\r\n            <ListItem>\r\n              <FileCopyIcon className={styles.listIcon} />\r\n              <Typography>\r\n                {fileConverters == null\r\n                  ? \"Loading...\"\r\n                  : fileConverters.map((converter) => (\r\n                      <ConvertButton\r\n                        key={converter.ShortName}\r\n                        file={file}\r\n                        converter={converter}\r\n                      />\r\n                    ))}\r\n              </Typography>\r\n            </ListItem>\r\n          </List>\r\n          <CardInfoSide file={file} />\r\n        </Box>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default FileInfoCard;\r\n","import React, { FormEvent, useState } from \"react\";\nimport \"./App.css\";\nimport {\n  AppBar,\n  Box,\n  Container,\n  IconButton,\n  Toolbar,\n  Typography,\n} from \"@material-ui/core\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport UploadCard from \"./UploadCard\";\nimport {\n  SmileBASIC3ProjectFile,\n  SmileBASIC4ProjectFile,\n  SmileBASICFile,\n  SmileBASICFileType,\n} from \"@sbapi-team/smilebasic-fileparser\";\nimport FileInfoCard from \"./FileInfoCard\";\n\nfunction SubFiles({\n  file,\n}: {\n  file: SmileBASIC3ProjectFile | SmileBASIC4ProjectFile;\n}) {\n  console.log(file.Content.Files);\n  let files: [name: string, file: SmileBASICFile][] = [];\n  for (let name of file.Content.Files.keys()) {\n    console.log(name);\n    files.push([name, file.Content.Files.get(name)!]);\n  }\n\n  return (\n    <Box my={4} ml={4}>\n      {files &&\n        files.map(([name, file]) => (\n          <Box my={4} key={name}>\n            <FileInfoCard file={file} name={name} />\n          </Box>\n        ))}\n    </Box>\n  );\n}\n\nfunction App() {\n  const [currentFile, setCurrentFile] = useState<SmileBASICFile>();\n  const [loading, setLoading] = useState<boolean>(false);\n\n  const handleUpload = async (event: FormEvent<HTMLInputElement>) => {\n    if (event.currentTarget.files?.[0]) {\n      setLoading(true);\n      const buffer = Buffer.from(\n        await event.currentTarget.files[0].arrayBuffer()\n      );\n\n      const file = await (\n        await SmileBASICFile.FromBuffer(buffer)\n      ).ToActualType();\n      setCurrentFile(file);\n      setLoading(false);\n    }\n  };\n  return (\n    <>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton edge=\"start\" color={\"default\"} aria-label=\"menu\">\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" color={\"textPrimary\"}>\n            SmileInspector\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container maxWidth=\"md\">\n        {currentFile != null && (\n          <>\n            <Box my={4}>\n              <FileInfoCard file={currentFile} />\n            </Box>\n            {(currentFile.Type === SmileBASICFileType.Project3 ||\n              currentFile.Type === SmileBASICFileType.Project4) && (\n              <SubFiles\n                file={\n                  currentFile as SmileBASIC3ProjectFile | SmileBASIC4ProjectFile\n                }\n              />\n            )}\n          </>\n        )}\n        <Box my={4}>\n          <UploadCard id=\"fileupload\" onUpload={handleUpload} />\n        </Box>\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","import { Button, Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport React, { HTMLProps } from \"react\";\r\n\r\nfunction FileUploadButton(props: HTMLProps<HTMLInputElement> & { id: string }) {\r\n  return (\r\n    <div>\r\n      <input style={{ display: \"none\" }} type=\"file\" {...props} />\r\n      <label htmlFor={props.id}>\r\n        <Button variant=\"contained\" color=\"primary\" component=\"span\">\r\n          Upload\r\n        </Button>\r\n      </label>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction UploadCard({\r\n  id,\r\n  onUpload,\r\n}: {\r\n  id: string;\r\n  onUpload: React.FormEventHandler<HTMLInputElement>;\r\n}) {\r\n  return (\r\n    <Card>\r\n      <CardContent>\r\n        <Typography variant=\"h5\">Load a file</Typography>\r\n        <br />\r\n        <FileUploadButton id={id} onChange={onUpload} />\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default UploadCard;\r\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 393;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createMuiTheme } from \"@material-ui/core\";\r\n\r\nconst Theme = createMuiTheme({\r\n    palette: {\r\n        type: 'dark',\r\n        primary: {\r\n            main: '#34BDDF',\r\n        },\r\n        secondary: {\r\n            main: '#f9a825',\r\n        },\r\n    }\r\n});\r\n\r\nexport default Theme;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { CssBaseline, ThemeProvider } from \"@material-ui/core\";\nimport Theme from \"./Theme\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={Theme}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}